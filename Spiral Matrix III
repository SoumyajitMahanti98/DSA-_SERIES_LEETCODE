class Solution {
    public int[][] spiralMatrixIII(int rows, int cols, int rStart, int cStart) {
        List<int[]> result = new ArrayList<>();
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // right, down, left, up
        int directionIndex = 0; // Start by moving right
        int steps = 1; // Initial steps to take in the current direction
        int x = rStart; // Start row
        int y = cStart; // Start column
        
        while (result.size() < rows * cols) {
            // Try to take steps in the current direction
            for (int i = 0; i < steps; i++) {
                // Add the current position if it's within bounds
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    result.add(new int[]{x, y});
                }
                // Move in the current direction
                x += directions[directionIndex][0];
                y += directions[directionIndex][1];
            }
            // Change direction
            directionIndex = (directionIndex + 1) % 4;

            // After completing both horizontal and vertical moves, increase the step count
            if (directionIndex % 2 == 0) {
                steps++;
            }
        }

        // Convert the result list to a 2D array
        return result.toArray(new int[result.size()][]);
    }
}
